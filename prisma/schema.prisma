// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  CANDIDATE
  REVIEWER
}

enum questionLevel {
  EASY
  MEDIUM
  HARD
}

model user {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  password  String
  role      Role     @default(CANDIDATE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  questionsIds String[]   @db.ObjectId
  questions    question[] @relation(fields: [questionsIds], references: [id])

  answers answer[]
}

model skill {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  questions question[]
}

model question {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  question        String
  difficultyLevel questionLevel @map("difficulty_level")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  usersIds String[] @db.ObjectId
  users    user[]   @relation(fields: [usersIds], references: [id])

  answers answer[]

  skill   skill?  @relation(fields: [skillId], references: [id])
  skillId String? @db.ObjectId
}

model answer {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  response  String?
  rating    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @db.ObjectId
  users  user   @relation(fields: [userId], references: [id])

  questionId String   @map("question_id") @db.ObjectId
  question   question @relation(fields: [questionId], references: [id])
}
